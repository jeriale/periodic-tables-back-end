const knex = require("../db/connection");

/**
 * Lists all `table` records in the database.
 */
const listAllTables = () =>
    knex("tables")
        .select("*")
        .orderBy("table_name");

/**
 * Lists all `table` records in the database where no `reservation_id` is present.
 */
const listFreeTables = () =>
    knex("tables")
        .select("*")
        .whereNull("reservation_id")
        .orderBy("table_name");

/**
 * Lists all `table` records in the database where a `reservation_id` is present.
 */
const listOccupiedTables = () =>
    knex("tables")
        .select("*")
        .whereNotNull("reservation_id")
        .orderBy("table_name");

/**
 * Inserts a new table.
 * @param {object} data
 *  the `formData` generated by the `TableForm` component.
 */
const createTable = (data) =>
    knex("tables")
        .insert(data, "*");

/**
 * Gets a specific table from the database.
 * @param {integer} tableId
 *  the `table_id` to be found in the database.
 */
const getTableById = (tableId) =>
    knex("tables")
        .where({ "table_id": tableId })
        .first();

/**
 * Updates the `table` record with new information from the `EditTableForm` component.
 * @param {object} table
 *  the `formData` from the `EditTableForm` component.
 */
 const updateTable = (table) => 
    knex("tables")
        .where({ "table_id": table.table_id })
        .update({
            "table_name": table.table_name,
            "capacity": table.capacity
        });

/**
 * Gets a specific table from the database.
 * @param {integer} tableId
 *  the `table_id` to be found in the database.
 */
 const deleteTable = (tableId) =>
    knex("tables")
        .where({ "table_id": tableId })
        .del();

/**
 * Gets the number of people in the reservation and returns that value for validation.
 * @param {integer} reservationId 
 *  the `reservation` record to be found.
 * @returns
 *  the number of `people` in the reservation.
 */
const getReservationSize = (reservationId) =>
    knex("reservations")
        .where({ "reservation_id": reservationId })
        .select("people")
        .first();

/**
 * Assigns a `reservation_id` to a specific `table_id`.
 * @param {integer} reservationId
 *  the `reservation_id` to be assigned to the `table` record.
 * @param {integer} tableId
 *  the `table_id` to be found in the database.
 */
const seatReservation = (reservationId, tableId) => {
    return knex.transaction((trx) => {
        return trx("tables")
            .where({ "table_id": tableId })
            .update({ "reservation_id": reservationId })
            .then(() => {
                return trx("reservations")
                    .where({ "reservation_id": reservationId })
                    .update({ "status": "seated" });
            })
            .catch(console.error);
    })
    .catch(console.error);
}

/**
 * Removes the `reservation_id` from the `table` record.
 * @param {integer} tableId
 *  the `table_id` to be found in the database. 
 */
const dismissReservation = (tableId) =>
    knex("tables")
        .where({ "table_id": tableId })
        .update({ "reservation_id": null });

module.exports = {
    listAllTables,
    listFreeTables,
    listOccupiedTables,
    createTable,
    getTableById,
    updateTable,
    getReservationSize,
    seatReservation,
    dismissReservation,
    deleteTable
}